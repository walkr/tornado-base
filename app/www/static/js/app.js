// Generated by CoffeeScript 1.7.1
(function() {
  var AppView, Channel, Message, MessageView, SOCKET_STATES, backboneSync, delay, getCookie, getJSON, postJSON, repeat, root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = this;

  root.UI = {};

  root.Chat = {};

  delay = function(ms, func) {
    return setTimeout(func, ms);
  };

  repeat = function(ms, func) {
    return setInterval(func, ms);
  };

  getCookie = function(key) {
    var r;
    r = document.cookie.match("\\b" + key + "=([^;]*)\\b");
    if (r) {
      return r[1];
    }
  };

  getJSON = function(url, before) {
    var args, headers, xsrf;
    xsrf = getCookie('_xsrf');
    headers = {
      'X-XSRFToken': xsrf
    };
    args = {
      url: url,
      dataType: 'json',
      headers: headers,
      beforeSend: before
    };
    return $.ajax(args);
  };

  postJSON = function(url, data, before) {
    var args, headers, xsrf;
    xsrf = getCookie('_xsrf');
    headers = {
      'X-XSRFToken': xsrf
    };
    args = {
      url: url,
      method: 'post',
      dataType: 'json',
      data: JSON.stringify(data),
      headers: headers,
      beforeSend: before
    };
    return $.ajax(args);
  };

  UI.buildRelativeDates = function(selector) {
    var dates, s;
    s = selector ? selector : '.timestamp';
    dates = $(s);
    return _.each(dates, function(item) {
      var date;
      date = new Date($(item).html() * 1000);
      return $(item).html(moment(date).fromNow());
    });
  };

  UI.buildRelativeDates();

  SOCKET_STATES = {
    connecting: 0,
    open: 1,
    closing: 2,
    closed: 3
  };

  Channel = (function() {
    Channel.prototype.callbacks = null;

    Channel.prototype.states = SOCKET_STATES;

    function Channel(address, opts) {
      if (opts == null) {
        opts = {};
      }
      this.socket = new WebSocket(address);
      this.opts = opts;
      this.reset();
    }

    Channel.prototype.on = function(event, callback) {
      return this.callbacks.push({
        event: event,
        callback: callback
      });
    };

    Channel.prototype.reset = function() {
      this.callbacks = [];
      this.connect();
      return this.pings();
    };

    Channel.prototype.send = function(msg) {
      var payload;
      payload = JSON.stringify(msg);
      if (this.socket.readyState === this.states.open) {
        return this.socket.send(payload);
      } else {
        return console.log('Cannot send message. ws state: ', this.socket.readyState);
      }
    };

    Channel.prototype.onOpen = function() {
      return console.log('ws connection openned ...');
    };

    Channel.prototype.onClose = function() {
      return console.log('ws connection closed ...');
    };

    Channel.prototype.onError = function(error) {
      return console.log('ws error', error);
    };

    Channel.prototype.onMessage = function(event) {
      var payload;
      payload = JSON.parse(event.data);
      return this.trigger(payload.event, payload.msg);
    };

    Channel.prototype.trigger = function(eventName, msg) {
      var callback, event, _i, _len, _ref, _ref1, _results;
      _ref = this.callbacks;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], event = _ref1.event, callback = _ref1.callback;
        if (event === eventName) {
          _results.push(callback(msg));
        }
      }
      return _results;
    };

    Channel.prototype.pings = function() {
      return repeat(5000, (function(_this) {
        return function() {
          console.log('Send server pings ...');
          return _this.send({
            event: 'ping',
            msg: null
          });
        };
      })(this));
    };

    Channel.prototype.connect = function() {
      this.socket.onopen = (function(_this) {
        return function() {
          return _this.onOpen();
        };
      })(this);
      this.socket.onclose = (function(_this) {
        return function(event) {
          return _this.onClose();
        };
      })(this);
      this.socket.onerror = (function(_this) {
        return function(error) {
          return _this.onError(error);
        };
      })(this);
      return this.socket.onmessage = (function(_this) {
        return function(event) {
          return _this.onMessage(event);
        };
      })(this);
    };

    return Channel;

  })();

  backboneSync = Backbone.sync;

  Backbone.sync = function(method, model, options) {
    var xsrf;
    xsrf = getCookie('_xsrf');
    options.headers = {
      'X-XSRFToken': xsrf
    };
    return backboneSync(method, model, options);
  };

  Message = (function(_super) {
    __extends(Message, _super);

    function Message() {
      return Message.__super__.constructor.apply(this, arguments);
    }

    Message.prototype.idAttribute = 'key';

    return Message;

  })(Backbone.Model);

  MessageView = (function(_super) {
    __extends(MessageView, _super);

    function MessageView() {
      return MessageView.__super__.constructor.apply(this, arguments);
    }

    MessageView.prototype.model = Message;

    MessageView.prototype.template = function(m) {
      return _.template($('#message-template').html())(m);
    };

    MessageView.prototype.initialize = function() {
      return this.listenTo(this.model, 'change', this.render);
    };

    MessageView.prototype.render = function() {
      this.$el.html(this.template(this.model.toJSON()));
      return this;
    };

    return MessageView;

  })(Backbone.View);

  AppView = (function(_super) {
    __extends(AppView, _super);

    function AppView() {
      return AppView.__super__.constructor.apply(this, arguments);
    }

    AppView.prototype.el = $('body');

    AppView.prototype.events = {
      'keypress #new-message': 'sendMessage'
    };

    AppView.prototype.initialize = function(opts) {
      this.input = this.$("#new-message");
      this.channel = opts.channel;
      this.startChannel();
      return console.log("Backbone application started for channel " + opts.channel + " ...");
    };

    AppView.prototype.startChannel = function() {
      var app;
      app = this;
      if (this.channel) {
        this.channel = new Channel("ws://localhost:8001/ws/" + this.channel);
        this.channel.on('new_msg', (function(_this) {
          return function(msg) {
            return app.showMessage(msg);
          };
        })(this));
        return this.channel.on('pong', function(msg) {
          return console.log('Pong');
        });
      } else {
        return console.log('No ws for you, since you dont have a channel');
      }
    };

    AppView.prototype.ping = function() {
      return this.channel.send({
        event: 'ping',
        msg: null
      });
    };

    AppView.prototype.showMessage = function(msg) {
      var view;
      view = new MessageView({
        model: msg
      });
      console.log('View is', view);
      return this.$("#messages").append(view.render().el);
    };

    AppView.prototype.sendMessage = function(e) {
      var msg, payload;
      if (e.which === 13) {
        msg = {
          text: $(e.target).val(),
          timestamp: Number(new Date())
        };
        payload = {
          event: 'new_msg',
          msg: msg
        };
        this.channel.send(payload);
        return this.input.val('');
      }
    };

    return AppView;

  })(Backbone.View);

  root.Chat.AppView = AppView;

}).call(this);
